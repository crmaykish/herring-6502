MEMORY {
    # Zero Page is the first 256 bytes of RAM
    ZP:
        start = $0,
        size = $100,
        type = rw, 
        define = yes;
    
    # The first 1KB of RAM (Zero Page excluded) are given to the loader program
    RAM:
        start = $200,
        size = $200,
        define = yes;

    # RAM between $400 and $DFFF is where dynamically-loaded programs are stored and run

    # 8KB of ROM space at the top of the address range
    ROM:
        start = $E000,
        size = $2000,
        file = %O,
        fill = yes,
        fillval=$FF;
}

SEGMENTS {
    # ROM

    STARTUP:
        load = ROM,
        type = ro;  

    ONCE: 
        load = ROM,
        type = ro,
        optional = yes;
    
    CODE:
        load = ROM,
        type = ro; 
    
    DATA:
        load = ROM,
        type = rw,
        define = yes,
        run = RAM;
    
    RODATA:
        load = ROM,
        type = ro;  
    
    VECTORS:
        load = ROM,
        type = ro,
        start = $FFFA;

    # RAM

    ZEROPAGE:
        load = ZP,
        type = zp,
        define = yes;

    BSS:
        load = RAM,
        type = bss,
        define = yes;
    
    HEAP:
        load = RAM,
        type = bss,
        optional = yes;
}

FEATURES {
    CONDES:
        segment = STARTUP,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
        
    CONDES:
        segment = STARTUP,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
}

SYMBOLS {
    # 256 bytes of stack available
    __STACKSIZE__:
        value = $100,
        type = weak;
}
